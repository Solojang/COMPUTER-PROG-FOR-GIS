# -*- coding: utf-8 -*-
"""Untitled20.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14ZH26wBr-E5rTwx_Etl4yuHdFHflsrnA
"""

from osgeo import gdal
from google.colab import files
uploaded = files.upload()

from io import BytesIO
#uploaded=files.upload()
data1=gdal.Open("categorydata.tif")
data1
#df2 = pd.read_csv(io.BytesIO(uploaded['Filename.csv']))
# Dataset is now stored in a Pandas Dataframe

import os
import gdal
import numpy as np
import pandas
import matplotlib.pyplot as plt

nb=data1.RasterCount
ns=int(data1.RasterXSize)
nl=int(data1.RasterYSize)

dataar=data1.ReadAsArray().astype('byte')
cdata=dataar

#Categorical data
newarr = np.diff(cdata, axis=0)
incidents=np.count_nonzero(newarr,axis=0)

#FileName=("E:\\GEOG 360 PROJECT\\newincidents.tif")
#writedata(FileName,incidents)
#plt.imshow(incidents,cmap='plasma')

countpixel=[]
#count pixels with number of changes
for y in range(nb):
    for i in np.unique(incidents):
        #countpixel.append(np.sum(binarydata[y]==i))
        countpixel.append(np.sum(cdata[y]==i))
        
changemap=newarr!=0
changemap=changemap.astype(int)        
        

def convert(list): 
      
    # Converting integer list to string list 
    s = [str(i) for i in list] 
      
    # Join list items using join() 
    res = str("".join(s)) 
      
    return(res) 

unique_=np.zeros((nl,ns)).astype(str)
# Driver code for
for i in range(nl):
    for j in range(ns):
        #a = binarydata[:,i,j].tolist()
        a = changemap[:,i,j].tolist()
        unique_[i,j]=convert(a)
            

np.size(np.unique(unique_))
np.unique(unique_).astype(str)

startyear='1986'
endyear='2004'
gap=2

#plot incidents
plt.imshow(incidents)

map_=np.zeros((nl,ns)).astype('byte')
map_[incidents==0]=0
map_[incidents==1]=1

states=np.zeros((nl,ns))
## count unique elements
for i in range(nl):
    for j in range(ns):
        states[i][j]=len(np.unique(cdata[:,i,j]))
        
map_[np.logical_and(incidents>=2,states==2)]=2
map_[np.logical_and(incidents>=2,states>2)]=3
#plot combination
plt.imshow(map_)

#plot states
plt.imshow(states)

import matplotlib.colors as colors
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
import numpy as np
categorylist=['Forest','Non Forest Natural Formation','Farming','Non Vegetated Area','Water']

colorlist=['lightgreen','green','yellow','black','aqua']
cmap = colors.ListedColormap(['lightgreen','green','yellow','black','aqua'])
boundaries = [0, 1, 2, 3, 4, 5,6]
norm = colors.BoundaryNorm(boundaries, cmap.N, clip=True)


i=1
values = np.unique(cdata[i].ravel())

fig, ax = plt.subplots(2,5,figsize=(20,8))

yearlist=np.arange(1986,2006,2).astype(str)

for ii in range(nb):
#for i in np.unique(cdata[cdata!=0]):
    im = ax.ravel()[ii].imshow(cdata[ii], interpolation='none',cmap=cmap,norm=norm)
    ax.ravel()[ii].axis('off')
    ax.ravel()[ii].set_title(yearlist[ii])
    # get the colors of the values, according to the 
    # colormap used by imshow
    #colors = [ im.cmap(im.norm(value)) for value in values]
    # create a patch (proxy artist) for every color 
    if(ii==nb-1):
        patches = [mpatches.Patch(color=colorlist[i-1], label=categorylist[i-1]) for i in np.unique(cdata[cdata!=0])]
        # put those patched as legend-handles into the legend
        ax.ravel()[ii].legend(handles=patches, bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0. )

### AREA ####

#for each time interval
#for each categroy
import pandas as pd

dfpres=pd.DataFrame(columns = ['year','Forest','Non Forest Natural Formation','Farming','Non Vegetated Area','Water'])
#gainloss.columns=['year','Forest','Non Forest Natural Formation','Farming','Non Vegetated Area','Water']
dfpres['year']=np.arange(int(startyear),int(endyear),gap)



for c in np.unique(cdata[cdata!=0]):
    pres=[]

    for t in range(nb-1):
        pres.append(np.sum(cdata[t]==c))
    
    dfpres.iloc[:,c]=pres
        


### PLOT LOSS AND GAIN ####
fig, ax = plt.subplots(figsize=(10,6))

#labels=np.flip(change[count.argsort()])[0:10]
xlabels=dfpres['year'].astype('str')

width=1.0
bargheight=dfpres.iloc[:,1:].cumsum(axis=1)


p=[]
p.append(ax.bar(xlabels,dfpres.iloc[:,1],width,color='green',align='edge'))


colors=['aqua','gold','brown','crimson']
for i in np.unique(cdata[cdata!=0])[1:]:
    p.append(ax.bar(xlabels,dfpres.iloc[:,i],width,bottom=bargheight.iloc[:,i-2],color=colors[i-2],align='edge'))

ax.set_title('Area of each land catagory by year',fontsize=14)
ax.set_ylabel('Area',fontsize=14)
ax.set_xlabel('Year',fontsize=14)
plt.legend((p[0][0], p[1][0],p[2][0],p[3][0],p[4][0]), ('Forest','Non Forest Natural Formation','Farming','Non Vegetated','Water',))    

ax.axhline(y=0,color='0',linewidth=0.5)
plt.show()

####  NO ONCE #####
### LOSS AND GAIN ####

#for each time interval
#for each categroy
import pandas as pd
dfloss=pd.DataFrame(columns = ['year','Forest','Non Forest Natural Formation','Farming','Non Vegetated Area','Water'])
#gainloss.columns=['year','Forest','Non Forest Natural Formation','Farming','Non Vegetated Area','Water']
dfloss['year']=np.arange(int(startyear),int(endyear),gap)

dfgain=pd.DataFrame(columns = ['year','Forest','Non Forest Natural Formation','Farming','Non Vegetated Area','Water'])
dfgain['year']=np.arange(int(startyear),int(endyear),gap)

for c in np.unique(cdata[cdata!=0]):
    loss=[]
    gain=[]
    for t in range(nb-1):
        #loss for category c
        loss.append(np.sum(np.logical_and(cdata[t]==c,cdata[t+1]!=c)))
        lossind=np.where(np.logical_and(cdata[t]==c,cdata[t+1]!=c))

        gain.append(np.sum(np.logical_and(cdata[t]!=c,cdata[t+1]==c)))
        gainind=np.where(np.logical_and(cdata[t]!=c,cdata[t+1]==c))

    dfloss.iloc[:,c]=loss
    dfgain.iloc[:,c]=gain

    
### PLOT LOSS AND GAIN ####
fig, ax = plt.subplots(figsize=(10,6))

#labels=np.flip(change[count.argsort()])[0:10]
xlabels=dfgain['year'].astype('str')

width=1.0
bargheight=dfgain.iloc[:,1:].cumsum(axis=1)
barlheight=dfloss.iloc[:,1:].cumsum(axis=1)

p=[]
p.append(ax.bar(xlabels,dfgain.iloc[:,1],width,color='lime',alpha=0.8,align='edge'))

x=[]
x.append(ax.bar(xlabels,-dfloss.iloc[:,1],width,color='lime',align='edge'))


colors=['cyan','yellow','sienna','salmon']
#colors=['gold','aqua','grey','crimson']
for i in np.unique(cdata[cdata!=0])[1:]:
    p.append(ax.bar(xlabels,dfgain.iloc[:,i],width,bottom=bargheight.iloc[:,i-2],color=colors[i-2],align='edge'))
    x.append(ax.bar(xlabels,-dfloss.iloc[:,i],width,bottom=-barlheight.iloc[:,i-2],color=colors[i-2],align='edge'))

ax.set_ylabel('Categorical Loss and Gain',fontsize=14)
ax.set_xlabel('Time (Year) ',fontsize=14)
plt.legend((p[0][0], p[1][0],p[2][0],p[3][0],p[4][0]), ('Forest','Non Forest Natural Formation','Farming','Non Vegetated Area','Water'),ncol=5, bbox_to_anchor=(0.5, -0.20),loc='lower center')    

ax.axhline(y=0,color='0',linewidth=0.5)
plt.show()

fig.savefig('D:\\USERS\\CLASS\\GEOG_360\\PROJECT\\GEOG360GRAPHS\\lossgainsim.jpg', dpi=300,format='jpg')



### LOSS AND GAIN ####

#for each time interval
#for each categroy
import pandas as pd
dfloss=pd.DataFrame(columns = ['year','Forest','Non Forest Natural Formation','Farming','Non Vegetated Area','Water'])
#gainloss.columns=['year','Forest','Non Forest Natural Formation','Farming','Non Vegetated Area','Water']
dfloss['year']=np.arange(int(startyear),int(endyear),gap)

dfgain=pd.DataFrame(columns = ['year','Forest','Non Forest Natural Formation','Farming','Non Vegetated Area','Water'])
dfgain['year']=np.arange(int(startyear),int(endyear),gap)

dfoncegain=pd.DataFrame(columns = ['year','Forest','Non Forest Natural Formation','Farming','Non Vegetated Area','Water'])
dfgain['year']=np.arange(int(startyear),int(endyear),gap)

dfonceloss=pd.DataFrame(columns = ['year','Forest','Non Forest Natural Formation','Farming','Non Vegetated Area','Water'])
dfonceloss['year']=np.arange(int(startyear),int(endyear),gap)

for c in np.unique(cdata[cdata!=0]):
    loss=[]
    gain=[]
    lossonce=[]
    gainonce=[]
    for t in range(nb-1):
        #loss for category c
        loss.append(np.sum(np.logical_and(cdata[t]==c,cdata[t+1]!=c)))
        lossind=np.where(np.logical_and(cdata[t]==c,cdata[t+1]!=c))
        postlossind=cdata[t+2:-1][:,lossind[0],lossind[1]]
        #loss once = did not go back to class c for all subsequent times, if it change to other category it still counts as loss once
        lossonce.append(np.sum(~np.any(postlossind==c,axis=0)))
        #gain for category c 
        gain.append(np.sum(np.logical_and(cdata[t]!=c,cdata[t+1]==c)))
        gainind=np.where(np.logical_and(cdata[t]!=c,cdata[t+1]==c))
        postgainind=cdata[t+2:-1][:,gainind[0],gainind[1]]
        #gain once = did not lose for all subsequent time
        gainonce.append(np.sum(~np.any(postgainind!=c,axis=0)))
    dfloss.iloc[:,c]=loss
    dfgain.iloc[:,c]=gain
    dfonceloss.iloc[:,c]=lossonce
    dfoncegain.iloc[:,c]=gainonce
    
### PLOT LOSS AND GAIN ####
fig, ax = plt.subplots(figsize=(10,6))

#labels=np.flip(change[count.argsort()])[0:10]
xlabels=dfgain['year'].astype('str')

width=1.0
width2=0.9
bargheight=dfgain.iloc[:,1:].cumsum(axis=1)
barlheight=dfloss.iloc[:,1:].cumsum(axis=1)
barloheight=dfonceloss.iloc[:,1:].cumsum(axis=1)
bargoheight=dfoncegain.iloc[:,1:].cumsum(axis=1)

p=[]
p.append(ax.bar(xlabels,dfgain.iloc[:,1],width,color='lime',alpha=0.8,align='edge'))

x=[]
x.append(ax.bar(xlabels,-dfloss.iloc[:,1],width,color='lime',align='edge'))

xo=[]
xo.append(ax.bar(xlabels,-dfonceloss.iloc[:,1],width,color='lightgreen',align='edge'))

po=[]
po.append(ax.bar(xlabels,dfoncegain.iloc[:,1],width,color='lightgreen',align='edge'))


colors=['blue','gold','brown','crimson']
colorso=['cyan','yellow','sienna','salmon']
for i in np.unique(cdata[cdata!=0])[1:]:
    p.append(ax.bar(xlabels,dfgain.iloc[:,i],width,bottom=bargheight.iloc[:,i-2],color=colors[i-2],align='edge'))
    x.append(ax.bar(xlabels,-dfloss.iloc[:,i],width,bottom=-barlheight.iloc[:,i-2],color=colors[i-2],align='edge'))
    xo.append(ax.bar(xlabels,-dfonceloss.iloc[:,i],width,bottom=-barlheight.iloc[:,i-2],color=colorso[i-2],alpha=0.5,align='edge'))
    po.append(ax.bar(xlabels,dfoncegain.iloc[:,i],width,bottom=bargheight.iloc[:,i-2],color=colorso[i-2],alpha=0.5,align='edge'))

ax.set_ylabel('Categorical Loss and Gain',fontsize=14)
ax.set_xlabel('Time (Year) ',fontsize=14)
plt.legend((p[0][0], p[1][0],p[2][0],p[3][0],p[4][0],po[0][0],po[1][0],po[2][0],po[3][0],po[4][0]), ('Forest Temporary','Non Forest Natural Formation Temporary','Farming Temporary','Non Vegetated Area Temporary','Water Temporary','Forest Once','Non Forest Natural Formation Once','Farming Once','Non Vegetated Area Once','Water Once'),ncol=2, bbox_to_anchor=(0.5, -0.38),loc='lower center')    

ax.axhline(y=0,color='0',linewidth=0.5)
plt.show()

fig.savefig('D:\\USERS\\CLASS\\GEOG_360\\PROJECT\\GEOG360GRAPHS\\oncetoggle.jpg', bbox_inches='tight',dpi=300,format='jpg')



catlist=['Forest','Non Forest Natural Formation','Farming','Non Vegetated Area','Water']
### CATEGORICAL LOSS AND GAIN #####
### LOSS AND GAIN ####

#for each time interval
#for each categroy
import pandas as pd
dfloss=pd.DataFrame(columns = ['year','Forest','Non Forest Natural Formation','Farming','Non Vegetated Area','Water'])
#gainloss.columns=['year','Forest','Non Forest Natural Formation','Farming','Non Vegetated Area','Water']
dfloss['year']=np.arange(int(startyear),int(endyear),gap)

dfgain=pd.DataFrame(columns = ['year','Forest','Non Forest Natural Formation','Farming','Non Vegetated Area','Water'])
dfgain['year']=np.arange(int(startyear),int(endyear),gap)


for c in np.unique(cdata[cdata!=0]):
    lossk=np.zeros((nb-1,len(np.unique(cdata))))
    gaink=np.zeros((nb-1,len(np.unique(cdata))))
    loss=[]
    gain=[]
    for t in range(nb-1):
        for k in np.unique(cdata[cdata!=0]):
            if (k!=c):
                #loss to category k
                lossk[t,k-1]=np.sum(np.logical_and(cdata[t]==c,cdata[t+1]==k))
                #gain from category k
                gaink[t,k-1]=np.sum(np.logical_and(cdata[t]==k,cdata[t+1]==c))
            
    fig, ax = plt.subplots(figsize=(10,6))
    
    #labels=np.flip(change[count.argsort()])[0:10]
    xlabels=dfgain['year'].astype('str')
    
    width=1.0
    bargheight=lossk.cumsum(axis=0)
    barlheight=gaink.cumsum(axis=0)

    
    p=[]
    
    x=[]
    
    
    colors=['green','blue','gold','brown','crimson']
    colorso=['cyan','yellow','sienna','salmon']
    bottomp=0
    bottomx=0
    for i in np.unique(cdata[cdata!=0]):
        if (i!=c):
            p.append(ax.bar(xlabels,gaink[:,i-1],width,bottom=bottomp,color=colors[i-1],align='edge',label='Gain from / Lose to '+catlist[i-1]))
            x.append(ax.bar(xlabels,-lossk[:,i-1],width,bottom=-bottomx,color=colors[i-1],align='edge'))
            bottomp=bottomp+gaink[:,i-1]
            bottomx=bottomx+lossk[:,i-1]
            
    ax.set_ylabel(catlist[c-1]+' Loss and Gain',fontsize=14)
    ax.set_xlabel('Time (Year) ',fontsize=14)
    ax.set_title(catlist[c-1])
    ax.axhline(y=0,color='0',linewidth=0.5)
    plt.legend(ncol=2, bbox_to_anchor=(0.5, -0.25),loc='lower center')
    plt.show()